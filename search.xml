<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[程序世界中的序列化与反序列化一[简介]]]></title>
    <url>%2F2018%2F04%2F26%2F%E7%A8%8B%E5%BA%8F%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%2F</url>
    <content type="text"><![CDATA[序什么是序列化？ 序列化是将程序中的对象或是数据结构转换成持久化的存储（例如文件或缓存）或是可以通过网络传输的字节流，并且转换的结果可以在后续需要的时候，依据预先定义的序列化格式，能够重新构造出原始的对象，这个过程在语义上等同于对于原始对象的clone。 序列化就是把内存中的对象保存起来，反序列化就是把保存的东西给恢复成内存中的对象，本质上跟数据库的作用类似，只不过跟数据库相比，一方面序列化技术能存储更为复杂的数据类型，而数据库只能存储基本数据类型和数据结构，另一方面序列化对程序语言的依赖性更强，需要程序语言定义好序列化的东西是什么（对象的结构），在反序列的时候要知道这个元信息，才能将网络或是硬盘中的字节流转换为相应的对象。 需要注意的是，在面向对象编程语言中，序列化对象的结果中不包含这个对象所拥有的方法，只能描述对象是什么（field），不能描述对象能干什么（method）。 常见的序列化技术以一个java的Cat类为例，介绍常见序列化技术的基本用法 123456789101112131415161718192021package serialization;public class Cat &#123; private String name; private int age; public Cat() &#123;&#125; public Cat(String name, int age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; public int getAge() &#123; return age; &#125;&#125; 一些序列化的技术得到大部分编程语言的支持，我称之为编程语言无关的序列化技术，常见的有： XMLJsonBsonMessagePackYAML其他一些序列化的技术只用在特定的编程语言中，以java为例，java中的序列化技术有： Java原生序列化jdk原生的序列化方案要求被序列化的类实现Serializable接口，该接口是标记接口，并无任何方法，仅用于提示JVM，先挖个坑，以后再学习java原生序列化的原理，先介绍如何使用。 实现了Serializable接口的Cat类： 12345678910111213141516171819202122232425262728293031323334package serialization;import java.io.Serializable;public class Cat implements Serializable &#123; /** * serialVersionUID 用于反序列化时验证版本是否一致 * 如果没有显示指定，jvm执行序列化时根据当前类hash值自动生成一个uid */ private static final long serialVersionUID = 1L ; private String name; private int age; public Cat() &#123;&#125; public Cat(String name, int age) &#123; this.name = name; this.age = age; &#125; public String getName() &#123; return name; &#125; public int getAge() &#123; return age; &#125; @Override public String toString() &#123; return "Cat&#123;" + "name='" + name + '\'' + ", age=" + age + '&#125;'; &#125;&#125; 序列化的核心类是ObjectOutputStream，序列化代码： 12345678910111213141516package serialization;import java.io.FileOutputStream;import java.io.ObjectOutputStream;public class JdkSerialization &#123; public static void main(String[] args) throws Exception &#123; Cat tom = new Cat("tom", 3); FileOutputStream fos = new FileOutputStream("cat.out"); ObjectOutputStream oos = new ObjectOutputStream(fos); oos.writeObject(tom); oos.flush(); oos.close(); &#125;&#125; 查看cat.out: 123456aced 0005 7372 0011 7365 7269 616c 697a6174 696f 6e2e 4361 7400 0000 0000 00000102 0002 4900 0361 6765 4c00 046e 616d6574 0012 4c6a 6176 612f 6c61 6e67 2f537472 696e 673b 7870 0000 0003 7400 03746f6d 反序列化cat对象: 12345678910111213package serialization;import java.io.FileInputStream;import java.io.ObjectInputStream;public class JdkDeSerialization &#123; public static void main(String[] args) throws Exception &#123; FileInputStream fis = new FileInputStream("cat.out"); ObjectInputStream ois = new ObjectInputStream(fis); Cat tom = (Cat) ois.readObject(); System.out.println(tom); &#125;&#125; 输出结果为正确的cat对象: Cat{name=&#39;tom&#39;, age=3} Kryomaven依赖 12345&lt;dependency&gt; &lt;groupId&gt;com.esotericsoftware&lt;/groupId&gt; &lt;artifactId&gt;kryo&lt;/artifactId&gt; &lt;version&gt;4.0.2&lt;/version&gt;&lt;/dependency&gt; 使用: 12345678910111213141516171819202122232425262728293031323334353637package serialization;import com.esotericsoftware.kryo.Kryo;import com.esotericsoftware.kryo.io.Input;import com.esotericsoftware.kryo.io.Output;import java.io.FileInputStream;import java.io.FileOutputStream;public class KryoTest &#123; private Kryo kryo; public KryoTest() &#123; this.kryo = new Kryo(); &#125; public void serialize(Cat cat) throws Exception &#123; Output output = new Output(new FileOutputStream("cat.out")); kryo.writeObject(output, cat); output.close(); &#125; public void deserialize() throws Exception &#123; Input input = new Input(new FileInputStream("cat.out")); Cat cat = kryo.readObject(input, Cat.class); input.close(); System.out.println(cat); &#125; public static void main(String[] args) throws Exception &#123; Cat tom = new Cat("tom", 3); KryoTest kryoTest = new KryoTest(); kryoTest.serialize(tom); kryoTest.deserialize(); &#125;&#125; Hessian2ProtobufThriftAvro]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于最近]]></title>
    <url>%2F2018%2F04%2F24%2F%E5%85%B3%E4%BA%8E%E6%9C%80%E8%BF%91%2F</url>
    <content type="text"><![CDATA[测试]]></content>
      <tags>
        <tag>我, 其他</tag>
      </tags>
  </entry>
</search>
